version: '3.8'

services:
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-your_database_name}
      POSTGRES_USER: ${DB_USER:-your_database_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_database_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - videoflix_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-your_database_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - videoflix_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  maildev:
    image: maildev/maildev:2
    restart: always
    ports:
      - "1025:1025"
      - "1080:1080"
    networks:
      - videoflix_network

  web:
    build: 
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME:-your_database_name}
      - DB_USER=${DB_USER:-your_database_user}
      - DB_PASSWORD=${DB_PASSWORD:-your_database_password}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_LOCATION=redis://redis:6379/1
      - USE_MAILDEV=${USE_MAILDEV:-True}
      - MAILDEV_HOST=${MAILDEV_HOST:-maildev}
      - MAILDEV_PORT=${MAILDEV_PORT:-1025}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-http://localhost:8000,http://127.0.0.1:8000}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:4200}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_USE_SSL=${EMAIL_USE_SSL}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-noreply@videoflix.local}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:-admin}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-admin@example.com}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD:-adminpassword}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - media_data:/app/media
    networks:
      - videoflix_network
    command: python manage.py runserver 0.0.0.0:8000

  worker:
    build: 
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME:-your_database_name}
      - DB_USER=${DB_USER:-your_database_user}
      - DB_PASSWORD=${DB_PASSWORD:-your_database_password}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_LOCATION=redis://redis:6379/1
      - USE_MAILDEV=${USE_MAILDEV:-True}
      - MAILDEV_HOST=${MAILDEV_HOST:-maildev}
      - MAILDEV_PORT=${MAILDEV_PORT:-1025}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-http://localhost:8000,http://127.0.0.1:8000}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:4200}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_USE_SSL=${EMAIL_USE_SSL}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-noreply@videoflix.local}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:-admin}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-admin@example.com}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD:-adminpassword}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    volumes:
      - .:/app
      - media_data:/app/media
    networks:
      - videoflix_network
    command: python manage.py rqworker default

volumes:
  postgres_data:
  redis_data:
  media_data:

networks:
  videoflix_network:
    driver: bridge